package com.smartlook.sdk.log

import androidx.annotation.LongDef

object LogAspect {

    const val NONE = 0b00000000000000000000000000000000L
    const val EXPORT = 0b00000000000000000000000000000001L
    const val LAYOUT = 0b00000000000000000000000000000010L // Can be reused
    const val SDK_METHODS = 0b00000000000000000000000000000100L
    const val VIDEO_CAPTURE = 0b00000000000000000000000000001000L
    const val LIFECYCLE = 0b00000000000000000000000000010000L
    const val AUTOMATIC_EVENT_DETECTION = 0b00000000000000000000000000100000L
    const val VIDEO_ENCODING = 0b00000000000000000000000001000000L
    const val NETWORK_INTERCEPTING = 0b00000000000000000000000010000000L // Can be reused
    const val AUTO_INTEGRATION = 0b00000000000000000000000100000000L // Can be reused
    const val ORIENTATION_CHANGES = 0b00000000000000000000001000000000L
    const val RENDERING_HISTOGRAM = 0b00000000000000000000010000000000L // Can be reused
    const val SESSION = 0b00000000000000000000100000000000L
    const val VISITOR = 0b00000000000000000001000000000000L
    const val IDENTIFICATION = 0b00000000000000000010000000000000L
    const val RECORD = 0b00000000000000000100000000000000L // Can be reused
    const val STORAGE = 0b00000000000000001000000000000000L
    const val CRASH_TRACKING = 0b00000000000000010000000000000000L
    const val CUSTOM_EVENTS = 0b00000000000000100000000000000000L
    const val SCREEN_CAPTURE = 0b00000000000001000000000000000000L // Can be reused
    const val BLACKLISTING = 0b00000000000010000000000000000000L // Can be reused
    const val JSON = 0b00000000000100000000000000000000L // Can be reused
    const val CONSISTENCY = 0b00000000001000000000000000000000L
    const val RECORD_STORAGE = 0b00000000010000000000000000000000L
    const val JOB = 0b00000001000000000000000000000000L
    const val THREAD = 0b00000010000000000000000000000000L // Can be reused
    const val BRIDGE_WIREFRAME = 0b00000100000000000000000000000000L // Can be reused
    const val API = 0b00001000000000000000000000000000L
    const val ANR = 0b00010000000000000000000000000000L

    const val ALL = EXPORT or LAYOUT or SDK_METHODS or VIDEO_CAPTURE or LIFECYCLE or AUTOMATIC_EVENT_DETECTION or
        VIDEO_ENCODING or NETWORK_INTERCEPTING or AUTO_INTEGRATION or ORIENTATION_CHANGES or RENDERING_HISTOGRAM or
        SESSION or VISITOR or IDENTIFICATION or RECORD or STORAGE or CRASH_TRACKING or CUSTOM_EVENTS or
        SCREEN_CAPTURE or BLACKLISTING or JSON or CONSISTENCY or RECORD_STORAGE or
        JOB or THREAD or BRIDGE_WIREFRAME or API or ANR

    @LongDef(
        NONE, EXPORT, LAYOUT, SDK_METHODS, VIDEO_CAPTURE, LIFECYCLE, AUTOMATIC_EVENT_DETECTION, VIDEO_ENCODING,
        NETWORK_INTERCEPTING, AUTO_INTEGRATION, ORIENTATION_CHANGES, RENDERING_HISTOGRAM, SESSION, VISITOR,
        IDENTIFICATION, RECORD, STORAGE, CRASH_TRACKING, CUSTOM_EVENTS, SCREEN_CAPTURE, BLACKLISTING,
        JSON, CONSISTENCY, RECORD_STORAGE, JOB, THREAD, BRIDGE_WIREFRAME, API, ALL, ANR
    )
    @Retention(AnnotationRetention.SOURCE)
    annotation class Aspect

    private val ASPECTS_PAIRS = listOf(
        NONE to "NONE",
        EXPORT to "REST",
        LAYOUT to "LAYOUT",
        SDK_METHODS to "API_CALLS",
        VIDEO_CAPTURE to "VIDEO_CAPTURE",
        LIFECYCLE to "LIFECYCLE",
        AUTOMATIC_EVENT_DETECTION to "AUTOMATIC_EVENT_DETECTION",
        VIDEO_ENCODING to "VIDEO_ENCODING",
        NETWORK_INTERCEPTING to "NETWORK_INTERCEPTING",
        AUTO_INTEGRATION to "AUTO_INTEGRATION",
        ORIENTATION_CHANGES to "ORIENTATION_CHANGES",
        RENDERING_HISTOGRAM to "RENDERING_HISTOGRAM",
        SESSION to "SESSION",
        VISITOR to "VISITOR",
        IDENTIFICATION to "IDENTIFICATION",
        RECORD to "RECORD",
        STORAGE to "STORAGE",
        CRASH_TRACKING to "CRASH_TRACKING",
        ANR to "ANR",
        CUSTOM_EVENTS to "CUSTOM_EVENTS",
        SCREEN_CAPTURE to "SCREEN_CAPTURE",
        BLACKLISTING to "BLACKLISTING",
        JSON to "JSON",
        CONSISTENCY to "CONSISTENCY",
        RECORD_STORAGE to "RECORD_STORAGE",
        JOB to "JOB",
        THREAD to "THREAD",
        BRIDGE_WIREFRAME to "BRIDGE_WIREFRAME",
        API to "API"
    )

    @JvmStatic
    internal fun toString(@Aspect aspects: Long): String {
        if (aspects == ALL)
            return "ALL"
        else if (aspects == NONE)
            return "NONE"

        val list = ArrayList<String>()

        for ((value, label) in ASPECTS_PAIRS)
            if ((aspects and value).let { it == value && it != NONE })
                list += label

        return list.joinToString("|") { it }
    }
}
