/*
 * Copyright 2025 Splunk Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.splunk.rum.integration.agent.api

import android.app.Application
import com.cisco.android.common.logger.Logger
import com.splunk.rum.integration.agent.api.SplunkRum.Companion.install
import com.splunk.rum.integration.agent.api.session.SessionConfiguration
import com.splunk.rum.integration.agent.api.spanfilter.SpanFilterBuilder
import com.splunk.rum.integration.agent.api.spanfilter.toSpanInterceptor
import com.splunk.rum.integration.agent.common.attributes.MutableAttributes
import com.splunk.rum.integration.agent.internal.legacy.LegacyAnrModuleConfiguration
import com.splunk.rum.integration.agent.internal.legacy.LegacyCrashModuleConfiguration
import com.splunk.rum.integration.agent.internal.legacy.LegacyNetworkMonitorModuleConfiguration
import com.splunk.rum.integration.agent.internal.legacy.LegacySlowRenderingModuleConfiguration
import io.opentelemetry.api.common.Attributes
import java.net.URL
import java.time.Duration
import java.util.function.Consumer

/**
 * A builder of [SplunkRum].
 */
@Deprecated("Use SplunkRum.install()")
class SplunkRumBuilder {

    private var accessToken: String? = null
    private var appName: String? = null
    private var deploymentEnvironment: String? = null
    private var realm: String? = null
    private var beaconEndpoint: String? = null
    private var enableDebug: Boolean = false
    private var globalAttributes: MutableAttributes = MutableAttributes()
    private var sessionBasedSampling = 1.0
    private var spanFilter: Consumer<SpanFilterBuilder>? = null
    private var instrumentedProcessName: String? = null
    private var deferredUntilForeground: Boolean = false
    private var crashReportingEnabled: Boolean = true
    private var anrReportingEnabled: Boolean = true
    private var slowRenderingDetectionEnabled: Boolean = true
    private var slowRenderingDetectionPollInterval: Duration = Duration.ofSeconds(1)
    private var networkMonitorEnabled: Boolean = true

    /**
     * Sets the RUM auth token to be used by the RUM library.
     */
    fun setRumAccessToken(token: String): SplunkRumBuilder {
        accessToken = token
        return this
    }

    /**
     * Sets the application name that will be used to identify your application in the Splunk RUM UI.
     */
    fun setApplicationName(name: String): SplunkRumBuilder {
        appName = name
        return this
    }

    /**
     * Sets the deployment environment for this RUM instance. Deployment environment is passed along
     * as a span attribute to help identify in the Splunk RUM UI.
     *
     * @param environment The deployment environment name
     */
    fun setDeploymentEnvironment(environment: String): SplunkRumBuilder {
        deploymentEnvironment = environment
        return this
    }

    /**
     * Sets the realm for the beacon to send RUM telemetry to. This should be used in place of the [setBeaconEndpoint] method in most cases.
     *
     * @param realm A valid Splunk "realm", e.g. "us0", "eu0".
     */
    fun setRealm(realm: String): SplunkRumBuilder {
        if (beaconEndpoint != null) {
            throw IllegalStateException("setRealm can not be set when setBeaconEndpoint was called")
        }

        this.realm = realm
        return this
    }

    /**
     * Sets the "beacon" endpoint URL to be used by the RUM library.
     *
     * Note that if you are using standard Splunk ingest, it is simpler to just use [setRealm]
     * and let this configuration set the full endpoint URL for you.
     */
    fun setBeaconEndpoint(endpoint: String): SplunkRumBuilder {
        if (beaconEndpoint != null) {
            throw IllegalStateException("setBeaconEndpoint can not be set when setRealm was called")
        }

        beaconEndpoint = endpoint
        return this
    }

    /**
     * Enables debugging information to be emitted from the RUM library.
     *
     * This feature is disabled by default. You can enable it by calling this method.
     */
    fun enableDebug(): SplunkRumBuilder {
        enableDebug = true
        return this
    }

    /**
     * Provides a set of global [Attributes] that will be applied to every span generated by the RUM instrumentation.
     */
    fun setGlobalAttributes(attributes: Attributes): SplunkRumBuilder {
        globalAttributes.setAll(attributes)
        return this
    }

    /**
     * Configures span data filtering.
     *
     * @param spanFilter A function that will configure the passed [SpanFilterBuilder].
     */
    fun filterSpans(spanFilter: Consumer<SpanFilterBuilder>): SplunkRumBuilder {
        this.spanFilter = spanFilter
        return this
    }

    /**
     * Sets the ratio of sessions that get sampled. Valid values range from 0.0 to 1.0, where 0
     * means no sessions are sampled, and 1 means all sessions are sampled.
     *
     * This feature is disabled by default - i.e. by default, all sessions are sampled, which is
     * equivalent to value 1.0.
     *
     * @param ratio The desired ratio of sampling. Must be within <0.0, 1.0>.
     */
    fun enableSessionBasedSampling(ratio: Double): SplunkRumBuilder {
        if (ratio < 0) {
            Logger.w(TAG, "enableSessionBasedSampling(ratio: $ratio) - ratio can not be lower then 0")
        } else if (ratio > 1) {
            Logger.w(TAG, "enableSessionBasedSampling(ratio: $ratio) - ratio can not be greater then 1")
        } else {
            sessionBasedSampling = ratio
        }

        return this
    }

    /**
     * Disables the instrumentation of subprocess feature. If enabled, subprocesses will be instrumented.
     *
     * This feature is enabled by default. You can disable it by calling this method.
     */
    fun disableSubprocessInstrumentation(applicationId: String): SplunkRumBuilder {
        instrumentedProcessName = applicationId
        return this
    }

    /**
     * Enable deferred instrumentation when app started from background start until
     * app is brought to foreground, otherwise instrumentation data will never be sent to exporter.
     *
     * Use case: Track only app session started by user opening app.
     */
    fun enableBackgroundInstrumentationDeferredUntilForeground(): SplunkRumBuilder {
        deferredUntilForeground = true

        return this
    }

    @Deprecated("This is no longer supported")
    fun enableDiskBuffering(): SplunkRumBuilder = this

    @Deprecated("This is no longer supported")
    fun limitDiskUsageMegabytes(maxUsageMegabytes: Int): SplunkRumBuilder = this

    /**
     * Disables the crash reporting feature.
     *
     * This feature is enabled by default. You can disable it by calling this method.
     */
    @Deprecated("CrashReporting is now controlled by the CrashModuleConfiguration")
    fun disableCrashReporting(): SplunkRumBuilder {
        crashReportingEnabled = false
        return this
    }

    /**
     * Disables the ANR reporting feature.
     *
     * This feature is enabled by default. You can disable it by calling this method.
     */
    @Deprecated("ANRReporting is now controlled by the ANRModuleConfiguration")
    fun disableAnrDetection(): SplunkRumBuilder {
        anrReportingEnabled = false
        return this
    }

    @Deprecated("Slow Rendering Detection is now controlled by the SlowRenderingModuleConfiguration")
    fun disableSlowRenderingDetection(): SplunkRumBuilder {
        slowRenderingDetectionEnabled = false
        return this
    }

    @Deprecated("Slow Rendering Detection is now controlled by the SlowRenderingModuleConfiguration")
    fun setSlowRenderingDetectionPollInterval(interval: Duration): SplunkRumBuilder {
        if (interval.toMillis() <= 0) {
            Logger.w(TAG, "invalid slowRenderPollingDuration: $interval is not positive")
            return this
        }
        slowRenderingDetectionPollInterval = interval
        return this
    }

    /**
     * Disables the network monitoring feature.
     *
     * This feature is enabled by default. You can disable it by calling this method.
     *
     * @return `this`
     */
    @Deprecated("NetworkMonitor is now controlled by the NetworkMonitorModuleConfiguration")
    fun disableNetworkMonitor(): SplunkRumBuilder {
        networkMonitorEnabled = false
        return this
    }

    /**
     * Creates a new instance of [SplunkRum] with the settings of this [SplunkRumBuilder].
     *
     * You must configure at least the [setApplicationName], the [setRealm] or the [setBeaconEndpoint] beacon,
     * and the [setRumAccessToken] before calling this method. Trying to build a [SplunkRum] instance without
     * any of these will result in an exception being thrown.
     *
     * The returned [SplunkRum] is set as the global instance [SplunkRum.instance]. If there was a global [SplunkRum]
     * instance configured before, this method does not initialize a new one and simply returns the existing instance.
     */
    fun build(application: Application): SplunkRum {
        val realm = realm
        val beaconEndpoint = beaconEndpoint

        val endpointConfiguration = when {
            realm != null -> EndpointConfiguration(
                realm = realm,
                accessToken ?: throw IllegalStateException("rumAccessToken was not set")
            )
            beaconEndpoint != null -> EndpointConfiguration(
                trace = URL(beaconEndpoint)
            )
            else ->
                throw IllegalStateException("setRealm() or setBeaconEndpoint() was not called")
        }

        val agent = install(
            application,
            agentConfiguration = AgentConfiguration(
                endpoint = endpointConfiguration,
                appName = appName ?: throw IllegalStateException("applicationName was not set"),
                deploymentEnvironment =
                deploymentEnvironment ?: throw IllegalStateException("deploymentEnvironment was not set"),
                enableDebugLogging = enableDebug,
                session = SessionConfiguration(sessionBasedSampling),
                globalAttributes = globalAttributes,
                instrumentedProcessName = instrumentedProcessName,
                deferredUntilForeground = deferredUntilForeground,
                spanInterceptor = this.spanFilter?.let {
                    val spanFilterBuilder = SpanFilterBuilder()
                    it.accept(spanFilterBuilder)
                    spanFilterBuilder.toSpanInterceptor()
                }
            ),
            moduleConfigurations = arrayOf(
                LegacyCrashModuleConfiguration(
                    isEnabled = crashReportingEnabled
                ),
                LegacyAnrModuleConfiguration(
                    isEnabled = anrReportingEnabled
                ),
                LegacySlowRenderingModuleConfiguration(
                    isEnabled = slowRenderingDetectionEnabled,
                    interval = slowRenderingDetectionPollInterval
                ),
                LegacyNetworkMonitorModuleConfiguration(
                    isEnabled = networkMonitorEnabled
                )
            )
        )

        return agent
    }

    private companion object {
        const val TAG = "SplunkRumBuilder"
    }
}
