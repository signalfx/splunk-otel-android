plugins {
    id 'com.android.library'
    id "maven-publish"
    id "signing"
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName project.version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        all {
            //provide the version of the library as a resource so it can be used as a span attribute.
            resValue "string", "rum.version", "${project.version}"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'

    implementation platform("io.opentelemetry:opentelemetry-bom:1.3.0")
    implementation 'io.opentelemetry:opentelemetry-sdk'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    implementation 'io.opentelemetry:opentelemetry-exporter-logging'

    implementation platform("io.opentelemetry:opentelemetry-bom-alpha:1.3.0-alpha")
    implementation 'io.opentelemetry:opentelemetry-semconv'

    api 'io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0:1.3.1-alpha'
    api 'com.squareup.okhttp3:okhttp:4.9.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'io.opentelemetry:opentelemetry-sdk-testing'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.findProperty('release') == "true" ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username findProperty("mavenCentralUsername")
                password findProperty("mavenCentralPassword")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = "com.splunk"
            artifactId = "splunk-otel-android"

            pom {
                name = "Splunk Otel Android"
                description = "A library for instrumenting Android applications for Splunk RUM"
                url = "https://github.com/signalfx/splunk-otel-android"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "splunk"
                        name = "Splunk Instrumentation Authors"
                        email = "support+sonatype@signalfx.com"
                        organization = "Splunk"
                        organizationUrl = "https://www.splunk.com"
                    }
                }
                scm {
                    connection = "https://github.com/signalfx/splunk-otel-android.git"
                    developerConnection = "https://github.com/signalfx/splunk-otel-android.git"
                    url = "https://github.com/signalfx/splunk-otel-android"
                }
            }
        }
    }
}

project.afterEvaluate {
    def component = project.components.findByName("release")
    publishing {
        publications {
            maven(MavenPublication) {
                from component
            }
        }
    }
}

signing {
    required { project.findProperty("release") == "true" }
    useGpgCmd()
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications["maven"]
}
